security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        CoralMedia\Bundle\SecurityBundle\Entity\User:
            algorithm: auto

    # Hierarchical Roles https://symfony.com/doc/current/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_API: ROLE_USER
        ROLE_ADMIN: ROLE_API
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        database:
            entity:
                class: CoralMedia\Bundle\SecurityBundle\Entity\User
                property: email
        in_memory:
            memory:
                users:
                    superadmin: { password: '$2y$13$TP9hFCwcvNTSxof2XlYYjO1SZ5Oeyg5mSA4SNnqEi8mNAbDCmpMdy', roles: [ 'ROLE_SUPER_ADMIN' ] }
                    admin: { password: '$2y$13$NjqGU.EvxlLb4bc5LRUS6uVN.LtMfOPswSYRAgYHpqN.yfZrmB7ci', roles: [ 'ROLE_ADMIN' ] }
                    api: { password: '$2y$13$2ozvt69hUC1QTmpZyp2dMO9XH0EYV0HyZ896m/RR.aA/ttqvrvxlW', roles: [ 'ROLE_API' ] }
                    user: { password: '$2y$13$gZA0aBLqLWVmVKUovY7hLOE2IZxsEOuIyIXlwzrN9NwO0ZfXgemdC', roles: [ 'ROLE_USER' ] }
        all_users:
            chain:
                providers: [ 'in_memory', 'database' ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/security/token
            stateless: true
            provider: all_users
            json_login:
                check_path: api_login_check
                username_path: user
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        refresh:
            pattern: ^/api/security/token/refresh
            stateless: true
        api:
            pattern: ^/api
            stateless: true
            provider: all_users
            entry_point: http_basic
            http_basic: ~
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/security/token, roles: PUBLIC_ACCESS }
        - { path: ^/api/security/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
